// const { act } = require("react");

// let appState = {
//   currentState: 'registration',
//   userId: null,
//   userNickname: '',
//   points: null,
// };

// // const ADMIN_IDS = [707309709, 1046929828]; 

// const tg = window.Telegram?.WebApp;
// tg?.expand();
// const telegramUser = tg?.initDataUnsafe?.user;
// const telegramId = telegramUser?.id;

// const registrationForm = document.getElementById("registration-form");
// const nicknameInput = document.getElementById("nickname-input");
// const registrationError = document.getElementById("registration-error");

// registrationForm.addEventListener("submit", async (e) => {
//   e.preventDefault();
//   const nickname = nicknameInput.value.trim();
//   if (!nickname) return;

//   try {
//     registrationError.classList.add("hidden");
//     console.log("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
//     const userData = await ApiClient.registerOrGetUser(telegramId, nickname);
//     appState.userId=userData.userId;
//     appState.userNickname=userData.nickname;
//     appState.points=userData.points;
//     console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª:", appState);
//     showState('waiting');
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
//     registrationError.textContent = err.message;
//     registrationError.classList.remove("hidden");
//   }
// });


// function showState(state) {
//   // 1. –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
//   document.querySelectorAll(".state").forEach(s => s.classList.add("hidden"));
  
//   // 2. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç (—ç–∫—Ä–∞–Ω) –ø–æ id, –Ω–∞–ø—Ä–∏–º–µ—Ä state-registration, state-admin, state-waiting
//   const el = document.getElementById(`state-${state}`);
//   if (el) el.classList.remove("hidden");

//   // 3. –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö id –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "nickname"
//   const nicknameElements = el.querySelectorAll("[id$='nickname']");
//   nicknameElements.forEach(elm => {
//     // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–∏—Ö nickname –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//     elm.textContent = appState.userNickname;
//   });
  
//   // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//   appState.currentState = state;
// }

// function shuffle(array) {
//   for (let i = array.length -1; i>0; i--) {
//     const j = Math.floor(Math.random() * (i+1));
//     [array [i], array[j]] = [array[j], array[i]];
//   }
//   return array;
// }


// let gameTimer = null;


// // ----------------- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ —Å–æ–±—ã—Ç–∏—è -----------------
// async function finishGamePhase() {
//   try {
//     const events = await ApiClient.listEvents();
//     const lastEvent = 
//     let phase= await ApiClient.getEventStatus();
//     if (phase.game_status === "finished") {
//       showState("finished");
//     } else if (phase.game_status === "registration") {
//       showState("registration");
//     } else {
//       showState("waiting-results");
//     }
//   } catch (e) {
//     console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã:", e);
//     document.getElementById("admin-notification").textContent = "–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã: " + e.message;
//   }
// }

// let questionIndex = 0;
// let questions = [];
// let intervalId = null;

// // ----------------- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã -----------------
// async function checkAndStartGame() {
//   try {
//     const events = await ApiClient.listEvents();
//     if (!events.length) return showState("waiting");

//     const event = events.reduce((a,b) => a.id > b.id ? a : b);
//     const eventStatus = await ApiClient.getEventStatus(event.id);

//     const quizzes = await ApiClient.listQuizzes();
//     const activeQuiz = quizzes.find(q => q.status ==="started");

    
//     if (eventStatus.game_status === "started" && activeQuiz) {
//       showState("game");

//       questions = shuffle(await ApiClient.listQuestions(activeQuiz.id));
//       questionIndex = 0;
//       nextQuestion();
      
//     } else {
//       showState("waiting");
//     }
//   } catch (e) {
//     console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:", e);
//     document.getElementById("admin-notification").textContent = "–û—à–∏–±–∫–∞: " + e.message;
//   }
// }

// function nextQuestion() {
//   if (questionIndex >= questions.length) {
//     clearTimeout(gameTimer);
//     finishGamePhase(eventId);
//     clearTimeout(gameTimer);
//     clearInterval(intervalId);
//     return;
//   }

//   const q = questions[questionIndex];
//   document.getElementById("question-text").textContent = q.text;
//   document.getElementById("current-q").textContent = questionIndex + 1;
//   document.getElementById("total-qs").textContent = totalQuestions.length;

//   let timer = 15;

//   document.getElementById("question-timer").textContent = `00:${timer < 10 ? '0' + timer : timer}`;
//   clearInterval(intervalId);

//   intervalId = setInterval(() => {
//     timer--;
//     document.getElementById("question-timer").textContent = `00:${timer < 10 ? '0' + timer : timer}`;
//     if (timer <= 0){
//       clearInterval(intervalId);
//       questionIndex++;
//       nextQuestion();
//     }
//   }, 1000);
// }

// const defaultQuestions = [
//   {
//     id: 1,
//     question: '–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–∫—Ä–∞—Å–Ω—ã–º" –∏–∑-–∑–∞ —Å–≤–æ–µ–π –æ–∫—Ä–∞—Å–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è?',
//     options: ['–í–æ–¥–æ—Ä–æ–¥', '–ñ–µ–ª–µ–∑–æ', '–ö–∏—Å–ª–æ—Ä–æ–¥', '–£—Ä–∞–Ω'],
//     correctAnswer: '–ñ–µ–ª–µ–∑–æ',
//   },
//   {
//     id: 2,
//     question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –ó–µ–º–ª–µ?',
//     options: ['–ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ', '–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è', '–¢—Ä–µ–Ω–∏–µ', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫'],
//     correctAnswer: '–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è',
//   },
//   {
//     id: 3,
//     question: '–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∫–∞—á–∫—É –∫—Ä–æ–≤–∏ –ø–æ –≤—Å–µ–º—É —Ç–µ–ª—É?',
//     options: ['–õ–µ–≥–∫–∏–µ', '–ú–æ–∑–≥', '–ü–µ—á–µ–Ω—å', '–°–µ—Ä–¥—Ü–µ'],
//     correctAnswer: '–°–µ—Ä–¥—Ü–µ',
//   },
//   {
//     id: 4,
//     question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–ª–µ–∫—É–ª–∞ –≤–æ–¥—ã?',
//     options: [
//       '–û–¥–∏–Ω –∞—Ç–æ–º –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–∏–Ω –∞—Ç–æ–º –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
//       '–î–≤–∞ –∞—Ç–æ–º–∞ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–∏–Ω –∞—Ç–æ–º –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
//       '–û–¥–∏–Ω –∞—Ç–æ–º –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –¥–≤–∞ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
//       '–î–≤–∞ –∞—Ç–æ–º–∞ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –¥–≤–∞ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
//     ],
//     correctAnswer: '–î–≤–∞ –∞—Ç–æ–º–∞ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–∏–Ω –∞—Ç–æ–º –∫–∏—Å–ª–æ—Ä–æ–¥–∞',
//   },
//   {
//     id: 5,
//     question: '–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –∫—Ä—É–ø–Ω—ã–º –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–º –Ω–∞ –ó–µ–º–ª–µ?',
//     options: ['–°–ª–æ–Ω', '–°–∏–Ω–∏–π –∫–∏—Ç', '–ë–µ–≥–µ–º–æ—Ç', '–ñ–∏—Ä–∞—Ñ'],
//     correctAnswer: '–°–∏–Ω–∏–π –∫–∏—Ç',
//   },
//   {
//     id: 6,
//     question: '–í –∫–∞–∫–æ–º –≥–æ–¥—É —á–µ–ª–æ–≤–µ–∫ –≤–ø–µ—Ä–≤—ã–µ –≤—ã—Å–∞–¥–∏–ª—Å—è –Ω–∞ –õ—É–Ω–µ?',
//     options: ['1959', '1969', '1979', '1989'],
//     correctAnswer: '1969',
//   },
//   {
//     id: 7,
//     question: '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –≤ —Ö–∏–º–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏?',
//     options: ['–î—ã—Ö–∞–Ω–∏–µ', '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑', '–§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è', '–¢—Ä–∞–Ω—Å–ø–∏—Ä–∞—Ü–∏—è'],
//     correctAnswer: '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑',
//   },
//   {
//     id: 8,
//     question: '–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –Ω–∞—É–∫–∞ –≥–µ–æ–ª–æ–≥–∏—è?',
//     options: [
//       '–ó–≤–µ–∑–¥—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã',
//       '–ñ–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è',
//       '–ó–µ–º–Ω—É—é –∫–æ—Ä—É, –µ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é',
//       '–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º',
//     ],
//     correctAnswer: '–ó–µ–º–Ω—É—é –∫–æ—Ä—É, –µ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é',
//   },
//   {
//     id: 9,
//     question: '–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–∏–º–∏ –∫–æ–ª—å—Ü–∞–º–∏?',
//     options: ['–ú–∞—Ä—Å', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω', '–ù–µ–ø—Ç—É–Ω'],
//     correctAnswer: '–°–∞—Ç—É—Ä–Ω',
//   },
//   {
//     id: 10,
//     question: '–ö –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –∂–∏–∑–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–ª–µ—Å–µ–Ω—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞, —á—Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ö–ª–µ–±–µ?',
//     options: ['–ë–∞–∫—Ç–µ—Ä–∏–∏', '–í–∏—Ä—É—Å—ã', '–ì—Ä–∏–±—ã', '–ü—Ä–æ—Å—Ç–µ–π—à–∏–µ'],
//     correctAnswer: '–ì—Ä–∏–±—ã',
//   },
// ];

// function logout() {
//   appState.userId = null;
//   appState.userNickname = '';
//   nicknameInput.value = '';
//   showState('registration');
// }


// // document.addEventListener("DOMContentLoaded", () => {
// //   setInterval(async () => {
// //     try {
// //       checkAndStartGame();
// //     } catch (e) {
// //       console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã:", e);
// //     }
// //   }, 2000);
// // });
4
const { act } = require("react");

let appState = {
  currentState: 'registration',
  userId: null,
  userNickname: '',
  points: null,
};

const tg = window.Telegram?.WebApp;
tg?.expand();
const telegramUser = tg?.initDataUnsafe?.user;
const telegramId = telegramUser?.id;

const registrationForm = document.getElementById("registration-form");
const nicknameInput = document.getElementById("nickname-input");
const registrationError = document.getElementById("registration-error");

// ==================== –ó–ê–ì–õ–£–®–ö–ò API ====================

const MockApiClient = {
  // –ó–∞–≥–ª—É—à–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  registerOrGetUser: async (telegramId, nickname) => {
    console.log("üîß Mock: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", { telegramId, nickname });
    await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    return {
      userId: Math.floor(Math.random() * 1000),
      nickname: nickname,
      points: 0
    };
  },

  // –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è
  getEventStatus: async () => {
    console.log("üîß Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è");
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const statuses = ["registration", "started", "finished"];
    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
    
    return {
      game_status: randomStatus,
      event_id: 1
    };
  },

  // –ó–∞–≥–ª—É—à–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
  listEvents: async () => {
    console.log("üîß Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π");
    await new Promise(resolve => setTimeout(resolve, 200));
    
    return [{
      id: 1,
      name: "–¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞",
      status: "active"
    }];
  },

  // –ó–∞–≥–ª—É—à–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤
  listQuizzes: async () => {
    console.log("üîß Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤");
    await new Promise(resolve => setTimeout(resolve, 200));
    
    return [{
      id: 1,
      name: "–ù–∞—É—á–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞",
      status: "started"
    }];
  },

  // –ó–∞–≥–ª—É—à–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  listQuestions: async (quizId) => {
    console.log("üîß Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞", quizId);
    await new Promise(resolve => setTimeout(resolve, 300));
    
    return [
      {
        id: 1,
        text: "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–∫—Ä–∞—Å–Ω—ã–º' –∏–∑-–∑–∞ —Å–≤–æ–µ–π –æ–∫—Ä–∞—Å–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è?",
        type: "text"
      },
      {
        id: 2,
        text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∫ –ó–µ–º–ª–µ?",
        type: "text"
      },
      {
        id: 3,
        text: "–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∫–∞—á–∫—É –∫—Ä–æ–≤–∏ –ø–æ –≤—Å–µ–º—É —Ç–µ–ª—É?",
        type: "text"
      },
      {
        id: 4,
        text: "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–ª–µ–∫—É–ª–∞ –≤–æ–¥—ã?",
        type: "text"
      },
      {
        id: 5,
        text: "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –∫—Ä—É–ø–Ω—ã–º –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–º –Ω–∞ –ó–µ–º–ª–µ?",
        type: "text"
      }
    ];
  },

  // –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
  submitAnswer: async (userId, questionId, answer) => {
    console.log("üîß Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞", { userId, questionId, answer });
    await new Promise(resolve => setTimeout(resolve, 800)); // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const pointsEarned = Math.floor(Math.random() * 10) + 1;
    appState.points += pointsEarned;
    
    return {
      success: true,
      points: pointsEarned,
      total_points: appState.points
    };
  }
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
const ApiClient = MockApiClient;

// ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ====================

registrationForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  const nickname = nicknameInput.value.trim();
  if (!nickname) return;

  try {
    registrationError.classList.add("hidden");
    console.log("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...");
    
    const userData = await ApiClient.registerOrGetUser(telegramId, nickname);
    appState.userId = userData.userId;
    appState.userNickname = userData.nickname;
    appState.points = userData.points;
    
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", appState);
    showState('waiting');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    startGameStatusChecker();
    
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    registrationError.textContent = err.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
    registrationError.classList.remove("hidden");
  }
});

function showState(state) {
  document.querySelectorAll(".state").forEach(s => s.classList.add("hidden"));
  
  const el = document.getElementById(`state-${state}`);
  if (el) el.classList.remove("hidden");

  const nicknameElements = el.querySelectorAll("[id$='nickname']");
  nicknameElements.forEach(elm => {
    elm.textContent = appState.userNickname;
  });
  
  appState.currentState = state;
  console.log(`üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${state}`);
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

let gameTimer = null;
let questionIndex = 0;
let questions = [];
let intervalId = null;

// ==================== –ó–ê–ì–õ–£–®–ö–ò –ò–ì–†–û–í–û–ô –õ–û–ì–ò–ö–ò ====================

async function finishGamePhase() {
  try {
    console.log("üîß Mock: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–∑—ã");
    const phase = await ApiClient.getEventStatus();
    
    if (phase.game_status === "finished") {
      showState("finished");
    } else if (phase.game_status === "registration") {
      showState("registration");
    } else {
      showState("waiting-results");
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã:", e);
  }
}

async function checkAndStartGame() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã...");
    const events = await ApiClient.listEvents();
    if (!events.length) return showState("waiting");

    const eventStatus = await ApiClient.getEventStatus();
    const quizzes = await ApiClient.listQuizzes();
    const activeQuiz = quizzes.find(q => q.status === "started");

    if (eventStatus.game_status === "started" && activeQuiz) {
      console.log("üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!");
      showState("game");

      questions = shuffle(await ApiClient.listQuestions(activeQuiz.id));
      questionIndex = 0;
      startQuestionSequence();
      
    } else {
      console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...");
      showState("waiting");
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:", e);
  }
}

function startQuestionSequence() {
  if (questionIndex >= questions.length) {
    console.log("üèÅ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    finishGamePhase();
    clearInterval(intervalId);
    return;
  }

  const question = questions[questionIndex];
  document.getElementById("question-text").textContent = question.text;
  document.getElementById("current-q").textContent = questionIndex + 1;
  document.getElementById("total-qs").textContent = questions.length;

  // –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
  document.getElementById("answer-textarea").value = "";
  document.getElementById("submit-answer-btn").disabled = false;
  document.getElementById("answer-status").innerHTML = "";

  let timer = 20; // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç
  updateTimerDisplay(timer);

  clearInterval(intervalId);
  intervalId = setInterval(() => {
    timer--;
    updateTimerDisplay(timer);
    
    if (timer <= 0) {
      clearInterval(intervalId);
      handleTimeUp();
    }
  }, 1000);
}

function updateTimerDisplay(seconds) {
  const minutes = Math.floor(seconds / 60);
  const secs = seconds % 60;
  document.getElementById("question-timer").textContent = 
    `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  
  // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–∞–π–º–µ—Ä–∞
  const timerElement = document.getElementById("question-timer");
  timerElement.classList.remove("timer-warning", "timer-critical");
  
  if (seconds <= 10) {
    timerElement.classList.add("timer-critical");
  } else if (seconds <= 30) {
    timerElement.classList.add("timer-warning");
  }
}

function handleTimeUp() {
  console.log("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!");
  document.getElementById("answer-status").innerHTML = 
    '<div class="notification error">‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</div>';
  
  document.getElementById("submit-answer-btn").disabled = true;
  
  setTimeout(() => {
    questionIndex++;
    startQuestionSequence();
  }, 2000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
document.getElementById("submit-answer-btn").addEventListener("click", async () => {
  const answerText = document.getElementById("answer-textarea").value.trim();
  if (!answerText) return;

  const button = document.getElementById("submit-answer-btn");
  const statusElement = document.getElementById("answer-status");
  
  try {
    button.disabled = true;
    button.innerHTML = '<div class="btn-loading">‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...</div>';
    
    const result = await ApiClient.submitAnswer(
      appState.userId, 
      questions[questionIndex].id, 
      answerText
    );
    
    statusElement.innerHTML = 
      `<div class="notification success">
         ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! +${result.points} –æ—á–∫–æ–≤ (–í—Å–µ–≥–æ: ${result.total_points})
       </div>`;
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      questionIndex++;
      startQuestionSequence();
    }, 2000);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:", error);
    statusElement.innerHTML = 
      `<div class="notification error">
         ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
       </div>`;
    button.disabled = false;
    button.textContent = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç";
  }
});

// –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
let statusCheckerInterval = null;

function startGameStatusChecker() {
  if (statusCheckerInterval) {
    clearInterval(statusCheckerInterval);
  }
  
  statusCheckerInterval = setInterval(async () => {
    if (appState.currentState === 'waiting' || appState.currentState === 'waiting-results') {
      await checkAndStartGame();
    }
  }, 3000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
}

function logout() {
  appState.userId = null;
  appState.userNickname = '';
  appState.points = null;
  nicknameInput.value = '';
  
  if (statusCheckerInterval) {
    clearInterval(statusCheckerInterval);
    statusCheckerInterval = null;
  }
  
  if (intervalId) {
    clearInterval(intervalId);
    intervalId = null;
  }
  
  showState('registration');
  console.log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
document.querySelectorAll('button[onclick="logout()"]').forEach(button => {
  button.addEventListener('click', logout);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  console.log("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–µ–∫)");
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  showState('registration');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
  const savedUser = localStorage.getItem('quizUser');
  if (savedUser) {
    try {
      const userData = JSON.parse(savedUser);
      appState = { ...appState, ...userData };
      showState('waiting');
      startGameStatusChecker();
    } catch (e) {
      localStorage.removeItem('quizUser');
    }
  }
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
window.addEventListener('beforeunload', () => {
  if (appState.userId) {
    localStorage.setItem('quizUser', JSON.stringify(appState));
  }
});